#test_default_format.cmake
#
#RHASH - Test executable
#TEST_DATA_FILE - test1K.data
#TMPDIR - temporary directory for test

# Test the SFV format using test1K.data from the previous test
#new_test "test default format:        "
#$rhash test1K.data | (
#  read l; match_line "$l" "^; Generated by RHash"
#  read l; match_line "$l" "^; Written by"
#  read l; match_line "$l" "^;\$"
#  read l; match_line "$l" "^; *1024  [0-9:\.]\{8\} [0-9-]\{10\} test1K.data\$"
#  read l; match_line "$l" "^test1K.data B70B4C26\$"
#) > match_err.log
#[ ! -s match_err.log ] && echo "Ok" || echo "Failed" && cat match_err.log
#rm -f match_err.log

#Note that this looks odd but we are using CMake lists
#where a ";" separates each item
SET(EXPECTED "")
LIST(APPEND EXPECTED "")
LIST(APPEND EXPECTED " Generated by RHash")
LIST(APPEND EXPECTED " Written by")
LIST(APPEND EXPECTED "\n")
LIST(APPEND EXPECTED " *1024  [0-9:.]{8} [0-9-]{10} test1K.data\ntest1K.data B70B4C26\n")

#Note that cmake itself can not do a stdin test
#and I don't want to use a shell for it since
#shell samantics are so different.
execute_process(
COMMAND ${RHASH} -p "%m" "${TEST_DATA_FILE}"
   OUTPUT_VARIABLE TEST_RESULT
   RESULT_VARIABLE TEST_ERR_VAR
   ERROR_VARIABLE TEST_ERROR_RESULT)

if(TEST_ERROR_RESULT)
 message(SEND_ERROR "${TEST_ERROR_RESULT}")
endif(TEST_ERROR_RESULT)

if(TEST_ERR_VAR GREATER 0)
  message(SEND_ERROR "${TEST_ERR_VAR}")
endif(TEST_ERR_VAR GREATER 0)

foreach(LINE ${TEST_RESULT})
  LIST(GET EXPECTED 0 _EXPECTED_LINE) 
  LIST(REMOVE_AT EXPECTED 0)
  if( ("${LINE}" STREQUAL "") AND ("${_EXPECTED_LINE}" STREQUAL "") )
    string(REGEX MATCH "${_EXPECTED_LINE}" _MATCH "${LINE}")
    if(_MATCH)
    else(_MATCH)
      message("EXPECTED")
      message("${_EXPECTED_LINE}")
      message("GOT")
      message("Variables")
      message("RHASH")
      message("${RHASH}")
      message("TEST_RESULT")
      message("${TEST_RESULT}")
      message("TEST_ERROR_RESULT")
      message("${TEST_ERROR_RESULT}")
      message("TEST_ERR_VAR")
      message("${TEST_ERR_VAR}")
      message(SEND_ERROR "FAILED!!!")
      break()
    endif(_MATCH)
  endif ( ("${LINE}" STREQUAL "") AND ("${_EXPECTED_LINE}" STREQUAL "") )
endforeach(LINE TEST_RESULT)
